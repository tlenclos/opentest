<?php

namespace Opentest;

use Symfony\Component\DomCrawler\Crawler;

/**
 * Class SiteInfos
 * Get informations of a website
 * parsing the result of www.w3techs.com
 * @package Opentest
 */
class SiteInfos {

    /**
     * Website url
     * @var string
     */
    public $site = '';

    /**
     * Infos
     * @var array
     */
    private $siteInfos = array();

    /**
     * @param $search
     */
    public function __construct($search) {
        if (empty($this->siteInfos)) {
            $siteUrl = parse_url($search);
            $this->site = $siteUrl;

            $crawler = new Crawler($this->getHtml());
            $results = $crawler
                ->filter('.tech_main')
                ->children()
                ->each(function (Crawler $node) {
                    $class = $node->attr('class');

                    // Header
                    if (stripos($class, "si_h") !== false) {
                        // Values
                        $value = $node->nextAll();

                        if ($value->count() > 0) {
                            $values = array();
                            $break = false;
                            for($i = 0; $i < $value->count(); $i++) {

                                $elemClass = $value->eq($i)->attr('class');
                                if (stripos($elemClass, "si_h") !== false || $break == true) {
                                    $break = true;
                                    break;
                                } else if (stripos($elemClass, "si_tech") !== false &&
                                    stripos($elemClass, "si_tech_np") === false ) {
                                    array_push($values, $value->eq($i)->text());
                                }

                            }

                        }

                        return array('key' => $node->text(), 'value' => $values);
                    }
                });

            // Populate class
            foreach($results as $result) {
                if (!empty($result['key']) && !empty($result['value'])) {
                    $this->siteInfos[$result['key']] = $result['value'];
                }
            }
        }
    }

    /**
     * Get html from w3techs
     * @return string
     */
    private function getHtml() {
        $url = 'http://w3techs.com/sites/info/' . urlencode($this->site['host']);
        // Always send POST request to W3tech to avoid "Crawl now" screen
        $data = array('add_site' => ' Crawl now! ');
        $options = array(
            'http' => array(
                'header' => "Content-type: application/x-www-form-urlencoded\r\n",
                'method' => 'POST',
                'content' => http_build_query($data),
            )
        );
        $context = stream_context_create($options);
        return file_get_contents($url, false, $context);
    }

    /**
     * @return array|bool
     */
    public function getAll() {
        if (!empty($this->siteInfos)) {
            return $this->siteInfos;
        } else {
            return false;
        }
    }

    /**
     * @return string|null
     */
    public function getDescription() {
        $key = 'Website Background';
        return !empty($this->siteInfos[$key]) ? array_shift($this->siteInfos[$key]) : null;
    }

    /**
     * @return string|null
     */
    public function getCms() {
        $key = 'Content Management System';
        return !empty($this->siteInfos['Content Management System']) ? $this->siteInfos['Content Management System'] : (!empty($this->siteInfos['Content Management Systems']) ? $this->siteInfos['Content Management Systems'] : null);
    }

    /**
     * @return array|null
     */
    public function getClientLanguage() {
        return !empty($this->siteInfos['Client-side Programming Language']) ? $this->siteInfos['Client-side Programming Language'] : (!empty($this->siteInfos['Client-side Programming Languages']) ? $this->siteInfos['Client-side Programming Languages'] : null);
    }

    /**
     * @return array|null
     */
    public function getJavascriptLibrary() {
        return !empty($this->siteInfos['JavaScript Library']) ? $this->siteInfos['JavaScript Library'] : (!empty($this->siteInfos['JavaScript Libraries']) ? $this->siteInfos['JavaScript Libraries'] : null);
    }

    /**
     * @return array|null
     */
    public function getServerLanguage() {
         return !empty($this->siteInfos['Server-side Programming Language']) ? $this->siteInfos['Server-side Programming Language'] : (!empty($this->siteInfos['Server-side Programming Languages']) ? $this->siteInfos['Server-side Programming Languages'] : null);

    }

    /**
     * @return array|null
     */
    public function getWebServer() {
        return !empty($this->siteInfos['Web Server']) ? $this->siteInfos['Web Server'] : (!empty($this->siteInfos['Web Servers']) ? $this->siteInfos['Web Servers'] : null);
    }

    /**
     * @return array|null
     */
    public function getOperatingSystem() {
        return !empty($this->siteInfos['Operating System']) ? $this->siteInfos['Operating System'] : (!empty($this->siteInfos['Operating Systems']) ? $this->siteInfos['Operating Systems'] : null);
    }

    /**
     * @return array|null
     */
    public function getSiteElements() {
        $key = 'Site Elements';
        return !empty($this->siteInfos['Site Elements']) ? $this->siteInfos['Site Elements'] : (!empty($this->siteInfos['Site Element']) ? $this->siteInfos['Site Element'] : null);
    }

    /**
     * @return array|null
     */
    public function getCharEncoding() {
        $key = 'Character Encoding';
        return !empty($this->siteInfos[$key]) ? $this->siteInfos[$key] : null;
    }
}