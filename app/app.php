<?php
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;

use Symfony\Component\Process\ProcessBuilder;
use Symfony\Component\Finder\Finder;

// Homepage
$app->get('/', function () use ($app) {
    return $app->redirect($app['url_generator']->generate('list'));
})
->bind('homepage');

// List
$app->get('/list', function () use ($app) {
    // Data
    $finder = new Finder();
    $finder->files()->in(__DIR__.'/data');

    // Form
    $form = $app['form.factory']->create($app['forms.pentest']);

    return $app['twig']->render('list.twig', array(
        'form' => $form->createView(),
        'files' => $finder
    ));
})
->bind('list');

// Ajax: Program a pentest
$app->post('/new', function (Request $request) use ($app) {
    // Form
    $form = $app['form.factory']->create($app['forms.pentest']);

    // Save
    $form->bind($request);

    if ($form->isValid()) {
        $data = $form->getData();

        $bin = $data['command'];
        $opts = [
            '-u ' .  $data['url']
        ];

        // Add options
        if ($bin == 'sqlmap') {
            $opts[] = '--batch';
        }

        $command = $data['command'] . ' ' . implode(' ', $opts);
        $handle = $app['gearman.client']->doBackground('background_process', $command);
        $success = $app['gearman.client']->returnCode() === GEARMAN_SUCCESS;

        return $app->json(array(
            'success', $success,
            'msg' => $success
                    ? 'Pentest "'.$bin.'" programmÃ©.'
                    : 'Erreur lors de la programmation du pentest.'
        ), 200);
    } else {
        $messages = array();
        foreach ($form->getErrors() as $error) {
            $messages[] = $error->getMessage();
        }
        return $app->json(array(
            'success' => false,
            'msg' => $messages
        ), 400);
    }
})
->bind('new');
