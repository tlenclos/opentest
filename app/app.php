<?php
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Process\ProcessBuilder;
use Symfony\Component\Finder\Finder;
use Opentest\SiteInfos;

function getWebsitesInfos($siteName = null) {
    $websites = array();
    $finder = new Finder();
    $finder->directories()->in(__DIR__.'/data/');

    if (!empty($siteName)) {
        $finder->directories()->name($siteName);
    }

    $finder->files()->name('infos.ser');

    foreach ($finder as $file) {
        $websites[] = unserialize($file->getContents());
    }

    return $websites;
}

// Homepage - add website
$app->match('/', function (Request $request) use ($app) {
    // Form
    $form = $app['form.factory']->create($app['forms.website']);

    if ('POST' == $request->getMethod()) {
        // Save
        $form->bind($request);

        if ($form->isValid()) {
            $data = $form->getData();

            // Create dir
            $url = parse_url($data['url']);
            $domain = $url['host'];
            $dir = __DIR__. '/data/'.$domain;
            mkdir($dir);

            // Get and store site infos
            $infos = new SiteInfos($data['url']);
            file_put_contents($dir.'/infos.ser', serialize($infos));

            return $app->redirect(
                $app['url_generator']->generate(
                    'pentests',
                    array('website' => $domain)
                )
            );
        }
    }

    return $app['twig']->render('index.twig', array(
        'form' => $form->createView(),
        'websites' => getWebsitesInfos()
    ));
})
->bind('homepage');


// Pentest list
$app->get('/pentests/{website}', function ($website) use ($app) {

    // Data
    try {
        $finder = new Finder();
        $finder->files()->in(__DIR__.'/data/'.$website)->name('*.log');;
    } catch (InvalidArgumentException $e) {
        // TODO Add flash message
        return $app->redirect($app['url_generator']->generate('homepage'));
    }

    // Form
    $form = $app['form.factory']->create($app['forms.pentest'], array('url' => 'http://'.$website));

    return $app['twig']->render('pentests.twig', array(
        'form' => $form->createView(),
        'files' => $finder,
        'website' => getWebsitesInfos($website)
    ));
})
->bind('pentests');


// Ajax: Program a pentest
$app->post('/add-pentest/{website}', function ($website, Request $request) use ($app) {
    $messages = array();
    $error = false;

    // Form
    $form = $app['form.factory']->create($app['forms.pentest']);
    $form->bind($request);
    $data = $form->getData();

    // Create pentest
    if ($form->isValid()) {
        // Validate same domain
        $urlInfo = parse_url($data['url']);
        if ($urlInfo['host'] == $website) {
            $bin = $data['command'];
            $opts = [
                '-u ' .  $data['url']
            ];

            // Add options
            if ($bin == 'sqlmap') {
                $opts[] = '--batch';
            }

            // TODO Create a pentest class
            $command = $data['command'] . ' ' . implode(' ', $opts);
            $params = array(
                'command' => $command,
                'website' => $website
            );

            $handle = $app['gearman.client']->doBackground('background_process', json_encode($params)); // Serialize
            $success = $app['gearman.client']->returnCode() === GEARMAN_SUCCESS;

            return $app->json(array(
                'success', $success,
                'msg' => $success
                        ? 'Pentest "'.$bin.'" programmÃ©.'
                        : 'Erreur lors de la programmation du pentest.'
            ), 200);
        } else {
            $error = true;
            $messages[] = 'Vous ne pouvez pas lancer de pentest sur un autre site';
        }
    } else {
        $error = true;
    }

    if ($error) {
        foreach ($form->getErrors() as $error) {
            $messages[] = $error->getMessage();
        }
        return $app->json(array(
            'success' => false,
            'msg' => $messages
        ), 400);
    }
})
->bind('add-pentest');
