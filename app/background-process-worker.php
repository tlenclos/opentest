<?php
use Symfony\Component\Process\Process;

define('DATA_DIR', __DIR__. '/data/');

require_once __DIR__ . '/bootstrap.php';

$callback = function ($job) use ($app)
{
    $params = json_decode($job->workload(), true); // Unserialize
    $command = $params['command'];
    $dir = $params['website'];

    // Connect to socket server
    $socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);
    socket_connect($socket, $app['socket.server']['host'], $app['socket.server']['port']);

    $pid = null;
    $process = new Process($command);

    // Launch process and send info to socket server
    try {
        $process->start();
        $pid = $process->getPid();

        // Create file
        $file = fopen(DATA_DIR.$dir.'/'.urlencode($command).'.log', "w");

        while ($process->isRunning()) {
            $stdout = $process->getIncrementalOutput();
            $stderr = $process->getIncrementalErrorOutput();

            if (false !== $stdout || false !== $stderr) {
                $json = [
                    'pid' => $pid,
                    'command' => $command,
                    'status' => $process->getStatus(),
                    'stdout' => $stdout,
                    'stderr' => $stderr
                ];

                // TODO : Different file?
                if ($stdout) {
                    fwrite($file, $stdout);
                }

                if ($stderr) {
                    fwrite($file, $stderr);
                }

                $buffer = json_encode($json);
                socket_write($socket, $buffer, mb_strlen($buffer));
            }
        }

        fclose($file);

    } catch (\Exception $e) {}

    // Process is terminated, send info to socket server
    $json = [
        'pid' => $pid,
        'command' => $command,
        'status' => $process->getStatus(),
        'success' => $process->isSuccessful()
    ];

    if (isset($e) && $e instanceof \Exception) {
        $json['exception'] = $e->getMessage();
    }

    $buffer = json_encode($json);
    socket_write($socket, $buffer, mb_strlen($buffer));

    // Close connection to socket server
    socket_close($socket);

    return true;
};

$app['gearman.worker']->addFunction('background_process', $callback);

echo 'Process worker is running.'.PHP_EOL;

while (1) {
    $app['gearman.worker']->work();
}
